<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Springboot之Actuator-heapdump漏洞</title>
      <link href="/2024/03/17/Springboot%E4%B9%8BActuator-heapdump%E6%BC%8F%E6%B4%9E/"/>
      <url>/2024/03/17/Springboot%E4%B9%8BActuator-heapdump%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="Springboot之Actuator-heapdump漏洞"><a href="#Springboot之Actuator-heapdump漏洞" class="headerlink" title="Springboot之Actuator-heapdump漏洞"></a>Springboot之Actuator-heapdump漏洞</h1><p>免责声明：由于传播、利用本文所发布的而造成的任何直接或者间接的后果及损失，均由使用者本人承担</p><h3 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h3><p>​Spring Boot为了解决Spring Framework的入门难度大、配置繁琐而诞生，简化了Spring框架的配置，达到了快速开发提高效率</p><h4 id="Actuator"><a href="#Actuator" class="headerlink" title="Actuator"></a>Actuator</h4><p>​springboot下的一个监控服务，无访问控制的情况下，可以通过HTTP 和 JMX访问，也就意味着存在未授权访问漏洞。在其中，不同的断点对应着不同的目标信息</p><p>​在渗透测试过程中，对攻击者来着，特别需要留意的几个端点</p><table><thead><tr><th><strong>Endpoint ID</strong></th><th><strong>Description</strong></th><th>exploit</th></tr></thead><tbody><tr><td>&#x2F;env</td><td>主机运行开放的所有服务</td><td>根据开发的服务，利用历史披露漏洞</td></tr><tr><td>&#x2F;heapdump</td><td>内存转储文件</td><td>下载后提取shiroKey、ak&#x2F;sk、springboot-admin-client账号密码等等</td></tr><tr><td>&#x2F;trace&#x2F;httptrace</td><td>请求追踪信息</td><td>cookie&#x2F;session等会话凭证泄露</td></tr><tr><td>&#x2F;actuator</td><td>监控主节点</td><td>对端点来说，类似书签管理器</td></tr><tr><td>&#x2F;refresh</td><td>刷新配置</td><td>触发进程刷新，以此来执行我们传入的命令</td></tr></tbody></table><p>补充：在springboot 1.x版本中，直接在上下文路径拼接断点即可访问。但是，到了springboot 2.x版本中，必须加入&#x2F;actuator，例如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//www.example.com/env//version:1.x</span></span><br><span class="line">https:<span class="comment">//www.example.com/actuator/env//version:2.x</span></span><br></pre></td></tr></table></figure><h3 id="heapdump漏洞复现"><a href="#heapdump漏洞复现" class="headerlink" title="heapdump漏洞复现"></a>heapdump漏洞复现</h3><p>​这里演示heapdump的利用-<strong>从内存转储文件中来获取Java 应用程序的内存使用情况</strong>。虽然&#x2F;env下有RCE漏洞，但是有一个Eureka-Client的功能依赖作为前置条件，还需搭配&#x2F;refresh，没有&#x2F;refresh，即使有env下的RCE，有Eureka-Client，也不可能利用成功。在实战中，对于笔者来说从没遇到过，反而heapdump 频率确实非常之高。</p><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>​这里使用的是阿里云spring脚手架：<a href="https://start.aliyun.com/">https://start.aliyun.com/</a></p><p><img src="/2024/03/17/Springboot%E4%B9%8BActuator-heapdump%E6%BC%8F%E6%B4%9E/img/1.png" alt="image-20240317154654078"></p><p><img src="/2024/03/17/Springboot%E4%B9%8BActuator-heapdump%E6%BC%8F%E6%B4%9E/img/2.png" alt="image-20240317154838485"></p><h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><p>​引入actuator的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h5><p>​配置暴露所有actuator端点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">management.endpoints.web.exposure.include=*</span><br></pre></td></tr></table></figure><h5 id="启动并访问"><a href="#启动并访问" class="headerlink" title="启动并访问"></a>启动并访问</h5><p><img src="/2024/03/17/Springboot%E4%B9%8BActuator-heapdump%E6%BC%8F%E6%B4%9E/img/3.png" alt="image-20240317155450633"></p><p>​<img src="/2024/03/17/Springboot%E4%B9%8BActuator-heapdump%E6%BC%8F%E6%B4%9E/img/4.png" alt="image-20240317155646582"></p><h4 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h4><p>​解析heapdump有常用的三款工具：MAT、jvisualvm、JDumpSpider，比较推荐JDumpSpider，这里演示后两种</p><p>​访问</p><p>​<img src="/2024/03/17/Springboot%E4%B9%8BActuator-heapdump%E6%BC%8F%E6%B4%9E/img/5.png" alt="image-20240317155904840"></p><p>​<img src="/2024/03/17/Springboot%E4%B9%8BActuator-heapdump%E6%BC%8F%E6%B4%9E/img/6.png" alt="image-20240317160019518"></p><h5 id="jvisualvm"><a href="#jvisualvm" class="headerlink" title="jvisualvm"></a>jvisualvm</h5><p>​Java VisualVM，简称 JVisualVM，是 JDK 自带的一个图形化工具，用于监控、故障排除和性能调优 Java 应用程序。它位于 JAVA_HOME&#x2F;bin 目录下，提供了丰富的功能，能够帮助开发人员对 Java 应用程序进行监控和分析。对于我们来说，就是可以直接查看heapdump中的信息。</p><p>​<img src="/2024/03/17/Springboot%E4%B9%8BActuator-heapdump%E6%BC%8F%E6%B4%9E/img/7.png" alt="image-20240317160648167"></p><p>​<img src="/2024/03/17/Springboot%E4%B9%8BActuator-heapdump%E6%BC%8F%E6%B4%9E/img/8.png" alt="image-20240317160731842"></p><p>装入&#x3D;&gt;选择heapdump</p><p><img src="/2024/03/17/Springboot%E4%B9%8BActuator-heapdump%E6%BC%8F%E6%B4%9E/img/9.png" alt="image-20240317160950829"></p><p>后续对敏感信息的获取，比如shiro的密钥，ak&#x2F;sk，Redis的明文密码等等等，都需要使用OQL语法，在oql控制台中进行查询</p><p>没装组件，凑个图</p><p><img src="/2024/03/17/Springboot%E4%B9%8BActuator-heapdump%E6%BC%8F%E6%B4%9E/img/10.png" alt="image-20240317163759422"></p><h5 id="JDumpSpider"><a href="#JDumpSpider" class="headerlink" title="JDumpSpider"></a>JDumpSpider</h5><p>​<a href="https://github.com/whwlsfb/JDumpSpider">https://github.com/whwlsfb/JDumpSpider</a></p><p>​这个比jvisualvm更人性化一点，毕竟jvisualvm不是为了做渗透的，它自动对敏感信息进行读取，我们就不用再用oql语句查询了</p><p>​<img src="/2024/03/17/Springboot%E4%B9%8BActuator-heapdump%E6%BC%8F%E6%B4%9E/img/11.png" alt="image-20240317164125859"></p><p>​后面的信息就不截图了，总之得到了heapdump可以说目标机器已经被拿下了</p><p>​</p><h3 id="end"><a href="#end" class="headerlink" title="end"></a><em>end</em></h3>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java命令执行</title>
      <link href="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="Java命令执行"><a href="#Java命令执行" class="headerlink" title="Java命令执行"></a>Java命令执行</h2><p>​</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a><strong>前言</strong></h3><p>​<strong>自己的学习记录，如有不足或疑问，欢迎指出或提问，谢谢。</strong></p><p>​文章介绍java的命令执行 以及 通过反射调用命令执行的扫盲知识。</p><p>​原生JDK提供了三个类来执行系统命令：java.lang.Runtime、java.lang.ProcessBuilder、java.lang.ProcessImpl。</p><p>​本文都是基于springboot实现web，不乏会有些注解。</p><h3 id="java-lang-Runtime"><a href="#java-lang-Runtime" class="headerlink" title="java.lang.Runtime"></a>java.lang.Runtime</h3><p>​java.lang包下的一个类，默认被导入，也就是说我们无需手动import，即可调用此类里面的方法</p><p>​Runtime是java.lang的一个类，主要是与操作系统交互执行命令，其中最常用的 就是<code>exec() </code></p><p><img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/1.png" alt="image-20240310141721486"></p><p>​jdk8中，<code>exec()</code>有六种重载形式，可以传入不同的参数类型来执行命令，这里演示<strong>exec(String command)<strong>、</strong>exec(String[] cmdarray)</strong></p><h4 id="exec-String-command"><a href="#exec-String-command" class="headerlink" title="exec(String command)"></a>exec(String command)</h4><p>​在单独的进程中执行指定的字符串命令。</p><p>​简单来说就是直接执行字符串命令。</p><h5 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="type">String</span> <span class="variable">command</span> <span class="operator">=</span> <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line">Runtime.getRuntime().exec(command)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实现 </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cmdstring</span><span class="params">(String command)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(command);</span><br><span class="line">        <span class="comment">//使用BufferedReader设置编码解决执行命令响应中文乱码问题</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span></span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream(), Charset.forName(<span class="string">&quot;GBK&quot;</span>)));</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在主方法中直接调用</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">command1</span> <span class="operator">=</span> <span class="string">&quot;cmd /c whoami&quot;</span>;</span><br><span class="line">cmdstring(command1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/2.png" alt="img"></p><h5 id="javaweb实现"><a href="#javaweb实现" class="headerlink" title="javaweb实现"></a>javaweb实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/execRuntimeString&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execRuntimeString</span><span class="params">(String command, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(command);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream(), Charset.forName(<span class="string">&quot;GBK&quot;</span>)));</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//逐行读取</span></span><br><span class="line">            System.out.println(line);</span><br><span class="line">            out.print(line);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>此处简单说一下注解，这三个都是spring框架中的注解，后续文章中再次出现，笔者就不在赘述了。</p><p><strong>@Controller</strong>：声明此类为控制器，也就是MVC中的”C”：controller层代码的功能</p><p><strong>@ResponseBody</strong>：当方法被调用时，返回的对象将被转换为响应体，并发送给客户端</p><p><strong>@RequestMapping</strong>：映射请求路径和方法，类似于Servlet中的@WebServlet</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url：http://localhost:8080/execRuntimeString?command=whoami</span><br></pre></td></tr></table></figure><p><img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/3.png" alt="image-20240310151224849"></p><h4 id="exec-String-cmdarray"><a href="#exec-String-cmdarray" class="headerlink" title="exec(String[] cmdarray)"></a>exec(String[] cmdarray)</h4><p>在单独的进程中执行指定的命令和参数。</p><p>简单来说就是以数组的形式接收多个字符串然后执行。</p><h5 id="java实现-1"><a href="#java实现-1" class="headerlink" title="java实现"></a>java实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例</span></span><br><span class="line">String[] command = &#123;<span class="string">&quot;powershell&quot;</span>,<span class="string">&quot;/c&quot;</span>,<span class="string">&quot;ping www.baidu.com&quot;</span>&#125;</span><br><span class="line">Runtime.getRuntime().exec(command);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cmdarray</span><span class="params">(String[] command)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(command);</span><br><span class="line">        <span class="comment">//使用BufferedReader设置编码解决执行命令响应中文乱码问题</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream(), Charset.forName(<span class="string">&quot;GBK&quot;</span>)));</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//主方法直接调用 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String[] command2 = &#123;<span class="string">&quot;powershell&quot;</span>,<span class="string">&quot;/c&quot;</span>,<span class="string">&quot;ping www.baidu.com&quot;</span>&#125;;</span><br><span class="line">        cmdarray(command2);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/4.png" alt="image-20240310152142609"></p><h5 id="javaweb中实现"><a href="#javaweb中实现" class="headerlink" title="javaweb中实现"></a>javaweb中实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/execRuntimeArray&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execRuntimeArray</span><span class="params">(String command, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        String[] commandarray =&#123;<span class="string">&quot;cmd&quot;</span>,<span class="string">&quot;/c&quot;</span>,command&#125;;</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> Runtime.getRuntime().exec(commandarray);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream(), Charset.forName(<span class="string">&quot;GBK&quot;</span>)));</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//逐行读取</span></span><br><span class="line">            System.out.println(line);</span><br><span class="line">            out.print(line);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/5.png" alt="image-20240310152443364"></p><h3 id="java-lang-ProcessBuilder"><a href="#java-lang-ProcessBuilder" class="headerlink" title="java.lang.ProcessBuilder"></a>java.lang.ProcessBuilder</h3><p>​ProcessBuilder同样也是lang包中的一个类，这个类主要用于创建操作系统进程，此类两个重要且常用的方法<code>command()</code>和<code>start()</code></p><h4 id="command-start"><a href="#command-start" class="headerlink" title="command()+start()"></a>command()+start()</h4><p>​command()有四种重载形式，也都和exec大同小异，一种是可变的字符串，简单说就是可以传入普通字符串，或者字符串数组，另一种是字符串列表。有exec的案例，就不演示command()的重载了</p><p><img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/6.png" alt="image-20240310153557809"></p><p>​start()用来执行通过command()设置的命令</p><p>​<strong>使用此方法执行命令流程：command()设置命令  &#x3D;&#x3D;》start()启动进程</strong></p><h5 id="java实现-2"><a href="#java实现-2" class="headerlink" title="java实现"></a>java实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例</span></span><br><span class="line"><span class="type">ProcessBuilder</span> <span class="variable">processBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>();</span><br><span class="line">processBuilder.command(<span class="string">&quot;calc&quot;</span>); <span class="comment">//设置启动计算器的命令</span></span><br><span class="line">processBuilder.start();<span class="comment">//执行命令</span></span><br></pre></td></tr></table></figure><p><img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/7.png" alt="image-20240310160038351"></p><h5 id="javaweb实现-1"><a href="#javaweb实现-1" class="headerlink" title="javaweb实现"></a>javaweb实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessBuilderController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/processBuilder&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processBuilder</span><span class="params">(String command, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ProcessBuilder</span> <span class="variable">processBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessBuilder</span>();</span><br><span class="line">        processBuilder.command(command);</span><br><span class="line">        <span class="type">Process</span> <span class="variable">start</span> <span class="operator">=</span> processBuilder.start();</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(start.getInputStream(), Charset.*forName*(<span class="string">&quot;GBK&quot;</span>)));</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>)&#123;</span><br><span class="line">            out.print(line);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url:http://localhost:8080/processBuilder?command=calc</span><br></pre></td></tr></table></figure><p><img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/8.png" alt="image-20240310160418616"></p><h3 id="java-lang-ProcessImpl"><a href="#java-lang-ProcessImpl" class="headerlink" title="java.lang.ProcessImpl"></a>java.lang.ProcessImpl</h3><p>​这里就不赘述反射相关的知识了，不懂java反射的同学可以先去学下反射再来看</p><p>​在JDK9之前，它是两个类：<code>UNIXProcess</code>和<code>ProcessImpl</code>，JDK9之后就把它们俩合并到了一个类中了</p><p><img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/9.png" alt="image-20240310161408091"></p><p>​ProcessImpl相对于其它两种就比较特殊了，ProcessImpl 是更为底层的实现，Runtime和ProcessBuilder执行命令实际上也是调用了ProcessImpl这个类，对于ProcessImpl，我们不能和其它两个类一样直接调用方法，java.lang.ProcessImpl 都被 private 封装起来了，并没有设置公共的 API 接口，只能<strong>通过反射调用</strong>。</p><h5 id="java实现-3"><a href="#java实现-3" class="headerlink" title="java实现"></a>java实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExecProcessImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            String[] cmds = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;whoami&quot;</span>&#125;;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.*forName*(<span class="string">&quot;java.lang.ProcessImpl&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(</span><br><span class="line">                <span class="string">&quot;start&quot;</span>,</span><br><span class="line">                String[].class,</span><br><span class="line">                Map.class,</span><br><span class="line">                String.class,</span><br><span class="line">                ProcessBuilder.Redirect[].class,</span><br><span class="line">                <span class="type">boolean</span>.class</span><br><span class="line">        );</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process) method.invoke(<span class="literal">null</span>, cmds, <span class="literal">null</span>, <span class="string">&quot;.&quot;</span>, <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream(), Charset.*forName*(<span class="string">&quot;GBK&quot;</span>)));</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(line);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/10.png" alt="image-20240310162820846"></p><h5 id="javaweb实现-2"><a href="#javaweb实现-2" class="headerlink" title="javaweb实现"></a>javaweb实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessImplController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/processImpl&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processImpl</span><span class="params">(String command, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        String[] cmds = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;command&#125;;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.*forName*(<span class="string">&quot;java.lang.ProcessImpl&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(</span><br><span class="line">                <span class="string">&quot;start&quot;</span>,</span><br><span class="line">                String[].class,</span><br><span class="line">                Map.class,</span><br><span class="line">                String.class,</span><br><span class="line">                ProcessBuilder.Redirect[].class,</span><br><span class="line">                <span class="type">boolean</span>.class</span><br><span class="line">        );</span><br><span class="line">        method.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> (Process)method.invoke(<span class="literal">null</span>,cmds,<span class="literal">null</span>,<span class="string">&quot;.&quot;</span>,<span class="literal">null</span>,<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">line</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">bufferedReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(process.getInputStream(), Charset.*forName*(<span class="string">&quot;GBK&quot;</span>)));</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">writer</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="keyword">while</span> ((line = bufferedReader.readLine())!= <span class="literal">null</span>)&#123;</span><br><span class="line">            writer.print(line);</span><br><span class="line">        &#125;</span><br><span class="line">        bufferedReader.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/11.png" alt="image-20240310163342400"></p><p>​到这里，java命令执行的基础就完毕了</p><h2 id="进阶-反射调用命令执行"><a href="#进阶-反射调用命令执行" class="headerlink" title="进阶-反射调用命令执行"></a>进阶-反射调用命令执行</h2><p>​</p><p>​通过反射来调用命令执行。</p><p>​因为三个命令执行类中，ProcessImpl只能通过反射调用 而且上述也已经演示，这里只讲述Runtime和ProcessBuilder。</p><h4 id="Runtime类"><a href="#Runtime类" class="headerlink" title="Runtime类"></a>Runtime类</h4><p>​Runtime类中 常用且简单粗暴的两种调用方法，<strong>getMethod()</strong>  、<strong>getDeclaredConstructor()</strong>  </p><h5 id="getMethod"><a href="#getMethod" class="headerlink" title="getMethod()"></a>getMethod()</h5><p>​获取一个类的一个public方法</p><p>​如下，通过反射调用Runtime类中的exec方法执行命令。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">execMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">runtime</span> <span class="operator">=</span> getRuntimeMethod.invoke(clazz);</span><br><span class="line">        execMethod.invoke(runtime, <span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​大家可能会发现，这里多了一个名为<code>getRuntime</code>方法，这是为什么？跟进到Runtime类可以得知</p><p>​<img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/12.png"></p><p>​橙色的锁在idea中表示private权限，也就是说Runtime类的构造器是私有的，因此不能直接使用<code>newInstance() </code>创建一个实例</p><p>​这个getRuntime又是什么，为什么需要用到这个方法来执行命令？</p><p>​跟进类源码可以看到</p><p><img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/13.png" alt="image-20240311174705517"></p><p>​因为Runtime类是私有的，jdk提供了一个公开的静态getRuntime()方法，这个方法返回了一个私有的静态实例变量<code>currentRuntime</code>，并将其初始化为<code>new Runtime()</code>，也就是一个新的<code>Runtime</code>对象，然后再调用其exec()方法。这涉及到了<strong>”单例模式“</strong>这个概念，大概就是将类的构造函数设为私有，再通过静态方法来获取，以此来减少资源的消耗和启动时间。</p><p><img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/14.png" alt="image-20240311180837386"></p><h5 id="getDeclaredConstructor"><a href="#getDeclaredConstructor" class="headerlink" title="getDeclaredConstructor()"></a>getDeclaredConstructor()</h5><p>​获得一个任意权限的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    Class&lt;?&gt; clazz = Class.*forName*(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">    <span class="type">Constructor</span> <span class="variable">m</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">    m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">    <span class="type">Method</span> <span class="variable">c1</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">    c1.invoke(m.newInstance(), <span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/15.png" alt="image-20240311183403259"></p><p>​构造器就一个，且没有传递构造参数。</p><p><img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/16.png" alt="image-20240311191043898"></p><h4 id="ProcessBuilder类"><a href="#ProcessBuilder类" class="headerlink" title="ProcessBuilder类"></a>ProcessBuilder类</h4><p>​相对于Runtime类，ProcessBuilder类携带了两个public的构造器：<strong>ProcessBuilder(List<String>)<strong>、</strong>ProcessBuilder(String)</String></strong></p><p>​直接通过newInstance()访问构造器，创建一个实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> clazz.getConstructor(List.class).newInstance(Arrays.asList(<span class="string">&quot;calc.exe&quot;</span>));</span><br><span class="line">        clazz.getMethod(<span class="string">&quot;start&quot;</span>).invoke(object,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​类中可以看到，给command属性传递了命令，然后再调用start()方法去执行命令</p><p>​<img src="/2024/03/11/java%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/img/17.png" alt="image-20240311192102761"></p><h1 id="end"><a href="#end" class="headerlink" title="end"></a>end</h1>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
